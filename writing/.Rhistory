ind.idx <- 1 # which individual is generating
while(ind.idx <= n_family_member) { #until the generated matches the input
#generate the current individual
if(family_strct$father[ind.idx]==0 & family_strct$mother[ind.idx]==0) { #if founder
family.haplo[ind.idx,] <- sample(1:n_haplo, 2, replace=T)
} else{ #if not founder
family.haplo[ind.idx,] <- c(sample(family.haplo[family_strct$father[ind.idx],], 1), sample(family.haplo[family_strct$mother[ind.idx],], 1))
}
ind.idx <- ind.idx + 1
}
#save haplotype effect
family.haplo.effect <- apply(family.haplo, 1, function(x) haplotype.effect[x[1]] + haplotype.effect[x[2]])
#generate phenotype
mu <- beta0 + family.haplo.effect
trait <- MASS::mvrnorm(1, mu=mu, Sigma=PE_E)
dis_status <- (trait > dis_cutoff + trait_mean) + 0
(n_affect <- sum(dis_status))
criteria
all(affect_spec==-1)
if(criteria | all(affect_spec==-1))
source('~/Dropbox/Documents/GSRA/2014-09-12 Project 4 -- sibpair design for quantitative trait/function.r', echo=TRUE)
family_generated <<- gene_family_pe(family_strct=family_strct_ped, n_family=n_family, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff, exact_affected = F)
criteria
eval(criteria)
source('~/Dropbox/Documents/GSRA/2014-09-12 Project 4 -- sibpair design for quantitative trait/function.r', echo=TRUE)
family_generated <<- gene_family_pe(family_strct=family_strct_ped, n_family=n_family, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff, exact_affected = F)
#add pseudo null variant since FB-SKAT can only work with 2+ in a gene
family_generated_diploid <- hap2dip(data=family_generated, risk.variant.id=risk.variant.id, save.file=T)
family_generated_diploid <- hap2dip(data=family_generated, risk.variant.id=risk.variant.id, save.file=T)
family_generated$data_family[,6]
family_generated$data_family[1:2+seq(1,1000,by=4),6]
family_generated$data_family[1:2+seq(1,1000,by=4),6]
family_generated$data_family[,6] > 101.546
family_generated$data_family[,6] > 101.645
sum(family_generated$data_family[,6] > 101.645)
family_generated_diploid <- hap2dip(data=family_generated, risk.variant.id=risk.variant.id, save.file=T)
result.trap.ind <- family.test(data=family_generated, f=risk.variant.id, summary.stat="3")$p.value
data=family_generated
f=risk.variant.id
summary.stat="3"
family.idx=1
current_row=sum(n_family_member[1:family.idx]) - n_family_member[family.idx]
h1 <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),7:(6+n_snp)]
h2 <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),-c(1:(6+n_snp))]
#adjust here for more founders
affect <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),"affect"]
tran_vec <- data$tran_vec[(current_row+1):(current_row+n_family_member[family.idx]),]
family_strct <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),1:6]
person <- c(0,family_strct[,2]) #adding 0 to check if the chromosome if from missing founder
#define who is a founder
founder <- rep(0, length=n_family_member[family.idx])
for(i in 1:n_family_member[family.idx]) {
founder[i] <- ifelse((family_strct$father[i]==0 & family_strct$mother[i]==0), 1,  #full founder
ifelse(!(family_strct$father[i] %in% person), 0.5, #half founder from father
ifelse(!(family_strct$mother[i] %in% person), -0.5, 0))) #half founder from mother
}
founder_idx <- which(founder!=0)
n_founder <- sum(abs(founder))
carrier <- as.vector(unlist(sapply(founder_idx, function(y){
if(founder[y]==1) {
c(ifelse(sum(h1[y, snp2look.idx]==1)>0, tran_vec[y, "h1"], NA),
ifelse(sum(h2[y, snp2look.idx]==1)>0, tran_vec[y, "h2"], NA))
}else{
if(founder[y]==0.5) { #from father
ifelse(sum(h1[y, snp2look.idx]==1)>0, tran_vec[y, "h1"], NA)
}else{
if(founder[y]==-0.5) { #from mother
ifelse(sum(h2[y, snp2look.idx]==1)>0, tran_vec[y, "h2"], NA)
}
}
}
})))
summary.stat="3"
n_family <- max(data$data_family$family)
n_family_member <- table(data$data_family$family)
#check if founder's haplotype carries any variant's with f < 0.1
if(length(f)==1 & f[1] <1) { #support allele frequency or list of snps
snp2look.idx <-  which(snp$FREQ1 < f) # snp to look for
} else(snp2look.idx <-  f)
n_carrier_family <- vector("integer", n_family) #number of carrier founder haplotype in each family
summary.stat <- switch (summary.stat,
"1" = function(tran_vec, carrier, affect) {sum(tran_vec[, c("h1","h2")] %in% carrier)*(affect-1)}, #only affected
"2" = function(tran_vec, carrier, affect) {sum((tran_vec[, c("h1","h2")] %in% carrier)*2-1)*(affect)}, #both affected and unaffected by halotype
"3" = function(tran_vec, carrier, affect) {(any(tran_vec[, c("h1","h2")] %in% carrier)*2-1)*(affect)} #both affected and unaffected by individual
)
#start looking at each family
test.stat <- sapply(1:n_family, function(x) {
family.idx=x
#     print(family.idx)
current_row=sum(n_family_member[1:family.idx]) - n_family_member[family.idx]
h1 <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),7:(6+n_snp)]
h2 <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),-c(1:(6+n_snp))]
current_row=sum(n_family_member[1:family.idx]) - n_family_member[family.idx]
h1 <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),7:(6+n_snp)]
h2 <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),-c(1:(6+n_snp))]
#adjust here for more founders
affect <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),"affect"]
tran_vec <- data$tran_vec[(current_row+1):(current_row+n_family_member[family.idx]),]
family_strct <- data$data_family[(current_row+1):(current_row+n_family_member[family.idx]),1:6]
person <- c(0,family_strct[,2]) #adding 0 to check if the chromosome if from missing founder
#define who is a founder
founder <- rep(0, length=n_family_member[family.idx])
for(i in 1:n_family_member[family.idx]) {
founder[i] <- ifelse((family_strct$father[i]==0 & family_strct$mother[i]==0), 1,  #full founder
ifelse(!(family_strct$father[i] %in% person), 0.5, #half founder from father
ifelse(!(family_strct$mother[i] %in% person), -0.5, 0))) #half founder from mother
}
founder_idx <- which(founder!=0)
n_founder <- sum(abs(founder))
carrier <- as.vector(unlist(sapply(founder_idx, function(y){
if(founder[y]==1) {
c(ifelse(sum(h1[y, snp2look.idx]==1)>0, tran_vec[y, "h1"], NA),
ifelse(sum(h2[y, snp2look.idx]==1)>0, tran_vec[y, "h2"], NA))
}else{
if(founder[y]==0.5) { #from father
ifelse(sum(h1[y, snp2look.idx]==1)>0, tran_vec[y, "h1"], NA)
}else{
if(founder[y]==-0.5) { #from mother
ifelse(sum(h2[y, snp2look.idx]==1)>0, tran_vec[y, "h2"], NA)
}
}
}
})))
n_carrier_family[family.idx] <<- n_carrier <- sum(!is.na(carrier)) #no. of carrier haplotypes
n_carrier_family
family.idx
n_carrier_family[family.idx] <<- n_carrier <- sum(!is.na(carrier)) #no. of carrier haplotypes
n_carrier_family
start.idx <- ifelse(nofounderphenotype==F, 1, 3)
nofounderphenotype=
F
start.idx <- ifelse(nofounderphenotype==F, 1, 3)
criteria <- !(n_carrier==(2*n_founder) | n_carrier==0)
IBD_haplotype_observed = 0
for(i in start.idx:n_family_member[family.idx]) {
#print(c(sum(tran_vec[current_row+i, c("h1","h2")] %in% carrier),(affect[current_row+i]-1)))
IBD_haplotype_observed <- IBD_haplotype_observed + summary.stat(tran_vec[i, ], carrier, affect[i])
}
observed <- IBD_haplotype_observed
observed
data$data_family[1:4, 5:6]
tran_vec
carrier
affect
sum(affect)
observed
carrier="A"
IBD_haplotype_observed = 0
for(i in start.idx:n_family_member[family.idx]) {
#print(c(sum(tran_vec[current_row+i, c("h1","h2")] %in% carrier),(affect[current_row+i]-1)))
IBD_haplotype_observed <- IBD_haplotype_observed + summary.stat(tran_vec[i, ], carrier, affect[i])
}
observed <- IBD_haplotype_observed
observed
IBD_haplotype_observed = 0
for(i in start.idx:n_family_member[family.idx]) {
#print(c(sum(tran_vec[current_row+i, c("h1","h2")] %in% carrier),(affect[current_row+i]-1)))
IBD_haplotype_observed <- IBD_haplotype_observed + summary.stat(tran_vec[i, ], carrier, affect[i])
}
observed <- IBD_haplotype_observed
start.idx
observed
affect
sum(affect[2:4])
-sum(affect[2:4])
-sum(affect[2:4]) + affect[1]
founder <- t(combn(LETTERS[1:(2*n_founder)], n_carrier))
S <- apply(founder, 1, function(x) {
carrier <- x #founder's haplotype
#       print(carrier)
IBD_haplotype_observed = 0
for(i in start.idx:n_family_member[family.idx]) {
#print(c(sum(tran_vec[current_row+i, c("h1","h2")] %in% carrier),(affect[current_row+i]-1)))
IBD_haplotype_observed <- IBD_haplotype_observed + summary.stat(tran_vec[i, ], carrier, affect[i])
}
IBD_haplotype_observed
}
)
S
founder <- t(combn(LETTERS[1:(2*n_founder)], n_carrier))
S <- apply(founder, 1, function(x) {
carrier <- x #founder's haplotype
#       print(carrier)
IBD_haplotype_observed = 0
for(i in start.idx:n_family_member[family.idx]) {
#print(c(sum(tran_vec[current_row+i, c("h1","h2")] %in% carrier),(affect[current_row+i]-1)))
IBD_haplotype_observed <- IBD_haplotype_observed + summary.stat(tran_vec[i, ], carrier, affect[i])
}
IBD_haplotype_observed
}
)
S
founder
n_founder
n_carrier
n_carrier=1
founder <- t(combn(LETTERS[1:(2*n_founder)], n_carrier))
S <- apply(founder, 1, function(x) {
carrier <- x #founder's haplotype
#       print(carrier)
IBD_haplotype_observed = 0
for(i in start.idx:n_family_member[family.idx]) {
#print(c(sum(tran_vec[current_row+i, c("h1","h2")] %in% carrier),(affect[current_row+i]-1)))
IBD_haplotype_observed <- IBD_haplotype_observed + summary.stat(tran_vec[i, ], carrier, affect[i])
}
IBD_haplotype_observed
}
)
S
mean_S <- mean(S)
mean_S
founder
var_S <- sum((S-mean(S))^2)/nrow(founder)
var_S
c(observed=observed, mean=mean_S, var=var_S, n_carrier=n_carrier, family.idx=family.idx)
var_S
source('~/Dropbox/Documents/GSRA/2014-09-12 Project 4 -- sibpair design for quantitative trait/function.r', echo=TRUE)
family_generated_centered <- family_generated
family_generated_centered$data_family[,"affaect"]
family_generated_centered$data_family[,"trait"]
family_generated_centered$data_family[,"affect"]
mutate()
data.cc_centered <- data.cc
data.cc_centered$affect
data.cc_centered <- data.cc
data.cc_centered$affect
data.cc_centered
data.cc_centered <- data.cc
data.cc <- gene_case_control_pe(n_case=n_cc, n_control=n_cc, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff)
data.cc <- gene_case_control_pe(n_case=n_cc, n_control=n_cc, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff)
data.cc_centered <- data.cc
data.cc_centered
system.time(gene_family_pe(family_strct=family_strct_ped, n_family=n_family, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff, exact_affected = F) )
data.cc_centered <- data.cc
data.cc_centered$affect <- data.cc_centered$affect - trait_mean
data.cc_centered$affect
data.cc_centered$affect>1.645
sum(data.cc_centered$affect>1.645)
system.time(gene_case_control_pe(n_case=n_cc, n_control=n_cc, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff))
result.trap.ind <- family.test(data=family_generated, f=risk.variant.id, summary.stat="3")$p.value
source('~/Dropbox/Documents/GSRA/2014-09-12 Project 4 -- sibpair design for quantitative trait/function.r', echo=TRUE)
result.trap.ind <- family.test(data=family_generated, f=risk.variant.id, summary.stat="3")
source('~/Dropbox/Documents/GSRA/2014-09-12 Project 4 -- sibpair design for quantitative trait/function.r', echo=TRUE)
result.trap.ind <- family.test(data=family_generated, f=risk.variant.id, summary.stat="3")
data.cc <- gene_case_control_pe(n_case=n_cc, n_control=n_cc, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff)
data.cc.diploid <- hap2dip(data=list(data_family=data.cc), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc.diploid$ped$trait ~ 1, out_type="C")
result.pop <- SKAT(as.matrix(data.cc.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
#centered_trait
family_generated_centered <- family_generated
family_generated_centered$data_family[,"affect"] <- family_generated_centered$data_family[,"affect"] - trait_mean
result.trap.ind.centered <- family.test(data=family_generated_centered, f=risk.variant.id, summary.stat="3")
data.cc_centered <- data.cc
data.cc_centered$affect <- data.cc_centered$affect - trait_mean
data.cc_centered.diploid <- hap2dip(data=list(data_family=data.cc_centered), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc_centered.diploid$ped$trait ~ 1, out_type="C")
result.pop.centered <- SKAT(as.matrix(data.cc_centered.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
result.trap.ind
result.trap.ind.centered
result.pop
result.pop.centered
r=1
Beta[risk.variant.id] <- r #effect size in linear model
risk.variant.id
family_generated <<- gene_family_pe(family_strct=family_strct_ped, n_family=n_family, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff, exact_affected = F)
family_generated_diploid <- hap2dip(data=family_generated, risk.variant.id=risk.variant.id, save.file=T)
result.trap.ind <- family.test(data=family_generated, f=risk.variant.id, summary.stat="3")
data.cc <- gene_case_control_pe(n_case=n_cc, n_control=n_cc, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff)
data.cc.diploid <- hap2dip(data=list(data_family=data.cc), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc.diploid$ped$trait ~ 1, out_type="C")
result.pop <- SKAT(as.matrix(data.cc.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
#centered_trait
family_generated_centered <- family_generated
family_generated_centered$data_family[,"affect"] <- family_generated_centered$data_family[,"affect"] - trait_mean
#add pseudo null variant since FB-SKAT can only work with 2+ in a gene
family_generated_centered_diploid <- hap2dip(data=family_generated_centered, risk.variant.id=risk.variant.id, save.file=T)
result.trap.ind.centered <- family.test(data=family_generated_centered, f=risk.variant.id, summary.stat="3")
data.cc_centered <- data.cc
data.cc_centered$affect <- data.cc_centered$affect - trait_mean
data.cc_centered.diploid <- hap2dip(data=list(data_family=data.cc_centered), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc_centered.diploid$ped$trait ~ 1, out_type="C")
result.pop.centered <- SKAT(as.matrix(data.cc_centered.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
result.trap.ind
result.trap.ind.centered
result.pop
result.pop.centered
result.trap.ind
result.trap.ind.centered
f=0.01
seed=1000
n_family=1000
family_strct = "3g.3a.4u" #"2g.2a.2u" "2g.2f.2c" "3g.3a.4u"
trait_mean=100
r=0
dis_cutoff = 1.645 #"NA" qnorm(0.05, lower=F)
qnorm(0.01, lower=F)
f=0.01
seed=1000
n_family=1000
family_strct = "2g.2a.2u" #"2g.2a.2u" "2g.2f.2c" "3g.3a.4u"
trait_mean=100
r=0
dis_cutoff = 2.33 #"NA" qnorm(0.01, lower=F)
#need to take in parameter
## passed in from the command prompt.
parseCommandArgs()
## Will disply the default values on the first run,
print(seed)
print(n_rep)
print(r)
print(n_family) #number of family
print(trait_mean) #trait mean
print(dis_cutoff)
# print(risk.variant)
print(family_strct)
print(f) #snps with f to consider
##1. read in cosi haplotype
#import the haplotypes generated by cosi
haplotype <- read.table("out_100k_10k_1kb.hap-1", header=F)
colnames(haplotype) <- c("HAP", "CHROM", paste("SNP", 1:(ncol(haplotype)-2), sep=""))
snp <-read.table("out_100k_10k_1kb.pos-1", header=T)
#make allele 1 is the minor allele, 2 is the common allele
temp.idx <- snp$FREQ1 > snp$FREQ2
temp.freq <- snp$FREQ2
snp$FREQ2[temp.idx] <- snp$FREQ1[temp.idx]
snp$FREQ1[temp.idx] <- temp.freq[temp.idx]
#also change the genotype file
haplotype[,which(temp.idx==T)+2] <- 3 - haplotype[,which(temp.idx==T)+2]
n_snp <- nrow(snp)
##2. gives structure and
family_strct_ped <- select_family_strct(family_strct)
##3.load library for pedgene and fbat_ext
.libPaths(c("/net/frodo/home/khlin/R/x86_64-pc-linux-gnu-library/3.2/", .libPaths()))
library(pedgene)
library(methods)
library(SKAT)
n_cc <- length(family_strct_ped$person)/2*n_family
##4. effect size
# risk.variant.id <- c(5,15,16,19,20,27,31,35,43,49)
(n_snp_f <- sum(snp$FREQ1<f))
(n_snp_f_causal <- round(n_snp_f*0.1)) #10 percent of snp with maf < f are causal
# risk.variant.id <<- sort(sample(which(0.0001<snp$FREQ1 & snp$FREQ1<f), round(n_snp_f_causal)))
# risk.haplo.id <- which(apply(2-as.matrix(haplotype[, risk.variant.id+2]), 1, sum)>0)
risk.variant.id <- switch(as.character(f),
"0.01"=c(4,37,38),
"0.05"=c(12,20,37,44),
"0.2"=c(1,4,22,26)
)
risk.haplo.f <<- mean(apply(2-as.matrix(haplotype[, risk.variant.id+2]), 1, sum)>0) #carrier haplotype frequency
cat("risk.haplo.f = ", risk.haplo.f, "\n")
Beta <- rep(0, length.out=50)
Beta[risk.variant.id] <- r #effect size in linear model
family_generated <<- gene_family_pe(family_strct=family_strct_ped, n_family=n_family, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff, exact_affected = F)
#add pseudo null variant since FB-SKAT can only work with 2+ in a gene
family_generated_diploid <- hap2dip(data=family_generated, risk.variant.id=risk.variant.id, save.file=T)
#run tests
result.trap.ind <- family.test(data=family_generated, f=risk.variant.id, summary.stat="3")$p.value
sim.fail <- tryCatch({
result.pedgene <- pedgene(ped=family_generated_diploid$ped, geno=family_generated_diploid$geno)
result.pedgene.vc <- result.pedgene$pgdf$pval.kernel
result.pedgene.burden <- result.pedgene$pgdf$pval.burden
F
},
error = function(e) return(T)
)
system(paste("/net/frodo/home/khlin/p3/FB-SKAT/FB-SKAT_v2.1 data_",seed,".ped variant_pass_",seed,".txt genes_",seed,".txt weight_",seed,".txt results_", seed, "_ mendelian_errors_",seed,"_ 10000 1 0.01 0 0", sep=""))
data.cc <- gene_case_control_pe(n_case=n_cc, n_control=n_cc, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff)
data.cc.diploid <- hap2dip(data=list(data_family=data.cc), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc.diploid$ped$trait ~ 1, out_type="C")
result.pop <- SKAT(as.matrix(data.cc.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
family_generated_centered <- family_generated
family_generated_centered$data_family[,"affect"] <- family_generated_centered$data_family[,"affect"] - trait_mean
#add pseudo null variant since FB-SKAT can only work with 2+ in a gene
family_generated_centered_diploid <- hap2dip(data=family_generated_centered, risk.variant.id=risk.variant.id, save.file=T)
#run tests
result.trap.ind.centered <- family.test(data=family_generated_centered, f=risk.variant.id, summary.stat="3")$p.value
sim.fail <- tryCatch({
result.pedgene <- pedgene(ped=family_generated_centered_diploid$ped, geno=family_generated_centered_diploid$geno)
result.pedgene.vc.centered <- result.pedgene$pgdf$pval.kernel
result.pedgene.burden.centered <- result.pedgene$pgdf$pval.burden
F
},
error = function(e) return(T)
)
data.cc_centered <- data.cc
data.cc_centered$affect <- data.cc_centered$affect - trait_mean
data.cc_centered.diploid <- hap2dip(data=list(data_family=data.cc_centered), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc_centered.diploid$ped$trait ~ 1, out_type="C")
result.pop.centered <- SKAT(as.matrix(data.cc_centered.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
result.trap.ind
result.trap.ind.centered
result.pop
result.pop.centered
r
r=1
r=1
ameter
## passed in from the command prompt.
parseCommandArgs()
## Will disply the default values on the first run,
print(seed)
print(n_rep)
print(r)
print(n_family) #number of family
print(trait_mean) #trait mean
print(dis_cutoff)
# print(risk.variant)
print(family_strct)
print(f) #snps with f to consider
##1. read in cosi haplotype
#import the haplotypes generated by cosi
haplotype <- read.table("out_100k_10k_1kb.hap-1", header=F)
colnames(haplotype) <- c("HAP", "CHROM", paste("SNP", 1:(ncol(haplotype)-2), sep=""))
snp <-read.table("out_100k_10k_1kb.pos-1", header=T)
#make allele 1 is the minor allele, 2 is the common allele
temp.idx <- snp$FREQ1 > snp$FREQ2
temp.freq <- snp$FREQ2
snp$FREQ2[temp.idx] <- snp$FREQ1[temp.idx]
snp$FREQ1[temp.idx] <- temp.freq[temp.idx]
#also change the genotype file
haplotype[,which(temp.idx==T)+2] <- 3 - haplotype[,which(temp.idx==T)+2]
n_snp <- nrow(snp)
##2. gives structure and
family_strct_ped <- select_family_strct(family_strct)
##3.load library for pedgene and fbat_ext
.libPaths(c("/net/frodo/home/khlin/R/x86_64-pc-linux-gnu-library/3.2/", .libPaths()))
library(pedgene)
library(methods)
library(SKAT)
n_cc <- length(family_strct_ped$person)/2*n_family
##4. effect size
# risk.variant.id <- c(5,15,16,19,20,27,31,35,43,49)
(n_snp_f <- sum(snp$FREQ1<f))
(n_snp_f_causal <- round(n_snp_f*0.1)) #10 percent of snp with maf < f are causal
# risk.variant.id <<- sort(sample(which(0.0001<snp$FREQ1 & snp$FREQ1<f), round(n_snp_f_causal)))
# risk.haplo.id <- which(apply(2-as.matrix(haplotype[, risk.variant.id+2]), 1, sum)>0)
risk.variant.id <- switch(as.character(f),
"0.01"=c(4,37,38),
"0.05"=c(12,20,37,44),
"0.2"=c(1,4,22,26)
)
risk.haplo.f <<- mean(apply(2-as.matrix(haplotype[, risk.variant.id+2]), 1, sum)>0) #carrier haplotype frequency
cat("risk.haplo.f = ", risk.haplo.f, "\n")
Beta <- rep(0, length.out=50)
Beta[risk.variant.id] <- r #effect size in linear model
#simulation for two-generation families
family_generated <<- gene_family_pe(family_strct=family_strct_ped, n_family=n_family, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff, exact_affected = F)
#add pseudo null variant since FB-SKAT can only work with 2+ in a gene
family_generated_diploid <- hap2dip(data=family_generated, risk.variant.id=risk.variant.id, save.file=T)
#run tests
result.trap.ind <- family.test(data=family_generated, f=risk.variant.id, summary.stat="3")$p.value
sim.fail <- tryCatch({
result.pedgene <- pedgene(ped=family_generated_diploid$ped, geno=family_generated_diploid$geno)
result.pedgene.vc <- result.pedgene$pgdf$pval.kernel
result.pedgene.burden <- result.pedgene$pgdf$pval.burden
F
},
error = function(e) return(T)
)
#   system(paste("/net/frodo/home/khlin/p3/FB-SKAT/FB-SKAT_v2.1 data_",seed,".ped variant_pass_",seed,".txt genes_",seed,".txt weight_",seed,".txt results_", seed, "_ mendelian_errors_",seed,"_ 10000 1 0.01 0 0", sep=""))
#   system(paste("/net/frodo/home/khlin/p3/FB-SKAT/FB-SKAT_v2.1 data_",seed,".ped variant_pass_",seed,".txt genes_",seed,".txt weight_",seed,".txt results_", seed, "_ mendelian_errors_",seed,"_ 10000 1 0.01 1 0", sep=""), ignore.stdout = TRUE)
#   x <- read.table(paste("results_", seed,"_1.000000_0.010000_0.txt", sep="")) #variance component
#   result.fbskat.vc <- 1-pchisq(x[,4],x[,5])
#   x <- read.table(paste("results_", seed,"_1.000000_0.010000_1.txt", sep="")) #burden
#   result.fbskat.burden=1-pchisq(x[,4],x[,5])
#case-control use burden test with equal weight
data.cc <- gene_case_control_pe(n_case=n_cc, n_control=n_cc, trait_mean=trait_mean, Beta=Beta, dis_cutoff = dis_cutoff)
data.cc.diploid <- hap2dip(data=list(data_family=data.cc), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc.diploid$ped$trait ~ 1, out_type="C")
result.pop <- SKAT(as.matrix(data.cc.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
#centered_trait
family_generated_centered <- family_generated
family_generated_centered$data_family[,"affect"] <- family_generated_centered$data_family[,"affect"] - trait_mean
#add pseudo null variant since FB-SKAT can only work with 2+ in a gene
family_generated_centered_diploid <- hap2dip(data=family_generated_centered, risk.variant.id=risk.variant.id, save.file=T)
#run tests
result.trap.ind.centered <- family.test(data=family_generated_centered, f=risk.variant.id, summary.stat="3")$p.value
sim.fail <- tryCatch({
result.pedgene <- pedgene(ped=family_generated_centered_diploid$ped, geno=family_generated_centered_diploid$geno)
result.pedgene.vc.centered <- result.pedgene$pgdf$pval.kernel
result.pedgene.burden.centered <- result.pedgene$pgdf$pval.burden
F
},
error = function(e) return(T)
)
#   system(paste("/net/frodo/home/khlin/p3/FB-SKAT/FB-SKAT_v2.1 data_",seed,".ped variant_pass_",seed,".txt genes_",seed,".txt weight_",seed,".txt results_", seed, "_ mendelian_errors_",seed,"_ 10000 1 0.01 0 0", sep=""))
#   system(paste("/net/frodo/home/khlin/p3/FB-SKAT/FB-SKAT_v2.1 data_",seed,".ped variant_pass_",seed,".txt genes_",seed,".txt weight_",seed,".txt results_", seed, "_ mendelian_errors_",seed,"_ 10000 1 0.01 1 0", sep=""), ignore.stdout = TRUE)
#   x <- read.table(paste("results_", seed,"_1.000000_0.010000_0.txt", sep="")) #variance component
#   result.fbskat.vc.centered <- 1-pchisq(x[,4],x[,5])
#   x <- read.table(paste("results_", seed,"_1.000000_0.010000_1.txt", sep="")) #burden
#   result.fbskat.burden.centered <- 1-pchisq(x[,4],x[,5])
#case-control use burden test with equal weight
data.cc_centered <- data.cc
data.cc_centered$affect <- data.cc_centered$affect - trait_mean
data.cc_centered.diploid <- hap2dip(data=list(data_family=data.cc_centered), risk.variant.id=risk.variant.id, save.file=F)
obj <- SKAT_Null_Model(data.cc_centered.diploid$ped$trait ~ 1, out_type="C")
result.pop.centered <- SKAT(as.matrix(data.cc_centered.diploid$geno[, -c(1:2)]), obj, weights.beta = c(1,1), r.corr = 1)$p.value
result.trap.ind
result.trap.ind.centered
result.pop.centered
result.pop
result.pedgene.vc
result.pedgene.burden
result.pedgene.burden.centered
result.pedgene.vc.centered
result.trap.ind.centered
source('~/Dropbox/Documents/GSRA/2014-09-12 Project 4 -- sibpair design for quantitative trait/function.r', echo=TRUE)
source('~/Dropbox/Documents/GSRA/2014-09-12 Project 4 -- sibpair design for quantitative trait/function.r', echo=TRUE)
family.test(data=family_generated, f=risk.variant.id, summary.stat="3")
family.test(data=family_generated, f=risk.variant.id, summary.stat="4")
family.test(data=family_generated_centered, f=risk.variant.id, summary.stat="4")
family.test(data=family_generated_centered, f=risk.variant.id, summary.stat="3")
